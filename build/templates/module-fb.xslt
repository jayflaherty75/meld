<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="text" indent="no" omit-xml-declaration="yes" />
<xsl:template match="module">
	<xsl:variable name="module" select="@name" />
	<xsl:variable name="namespace" select="namespace" />

/'
 ' Generated by Meld Framework, do not modify.  Any changes will be overwritten
 ' during the build process.
 '/

#include once "../../../../../modules/headers/<xsl:value-of select="$module" />/<xsl:value-of select="$module" />-v1.bi"
#include once "<xsl:value-of select="$module" />.bi"

Function exports cdecl Alias "exports" () As any ptr export
	<xsl:for-each select="function">
		<xsl:choose>
			<xsl:when test="not(private)">
				<xsl:text>moduleState.methods.</xsl:text>
				<xsl:value-of select="@name" />
				<xsl:text> = @</xsl:text>
				<xsl:value-of select="$namespace" />
				<xsl:text>.</xsl:text>
				<xsl:value-of select="@name" />
				<xsl:text>&#xa;</xsl:text>
			</xsl:when>
		</xsl:choose>
	</xsl:for-each>

	return @moduleState.methods
End Function

Function load cdecl Alias "load" (modulePtr As Module.Interface ptr) As short export
	If modulePtr = NULL Then
		print("**** Default.load: Invalid Module interface pointer")
		return false
	End If

	If not moduleState.isLoaded Then
		<xsl:for-each select="requires">
			<xsl:variable name="var-name">
				<xsl:call-template name="camelCase">
					<xsl:with-param name="text" select="@module"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:text>_</xsl:text>
			<xsl:value-of select="$var-name" />
			<xsl:text> = modulePtr->require("</xsl:text>
			<xsl:value-of select="@module" />
			<xsl:text>")&#xa;</xsl:text>
			<xsl:text>If _</xsl:text>
			<xsl:value-of select="$var-name" />
			<xsl:text> = NULL then&#xa;</xsl:text>
			<xsl:text>print("**** Default.load: Failed to load </xsl:text>
			<xsl:value-of select="@module" />
			<xsl:text> dependency")&#xa;</xsl:text>
			<xsl:text>Return false&#xa;</xsl:text>
			<xsl:text>End If&#xa;</xsl:text>
		</xsl:for-each>
		<xsl:text>&#xa;&#xa;</xsl:text>

		<xsl:for-each select="function/throws">
			<xsl:text>errors.</xsl:text>
			<xsl:value-of select="@type" />
			<xsl:text> = _fault->getCode("</xsl:text>
			<xsl:value-of select="@type" />
			<xsl:text>")&#xa;</xsl:text>
			<xsl:text>If errors.</xsl:text>
			<xsl:value-of select="@type" />
			<xsl:text> = NULL then&#xa;</xsl:text>
			<xsl:text>print("**** Default.load: Missing error definition for </xsl:text>
			<xsl:value-of select="@type" />
			<xsl:text>")&#xa;</xsl:text>
			<xsl:text>Return false&#xa;</xsl:text>
			<xsl:text>End If&#xa;</xsl:text>
		</xsl:for-each>
		<xsl:text>&#xa;&#xa;</xsl:text>


		moduleState.references = 0
		moduleState.startups = 0
		moduleState.isLoaded = true
	End If

	moduleState.references += 1

	return true
End Function

Function unload cdecl Alias "unload" () As short export
	moduleState.references -= 1

	If moduleState.references &lt;= 0 Then
		moduleState.references = 0
		moduleState.startups = 0
		moduleState.isLoaded = false
	End If

	return moduleState.isLoaded
End Function

Function test () As short export
	dim As Default.Interface ptr interfacePtr = exports()
	dim As Tester.testModule tests(1)

	If interfacePtr-&gt;test = NULL Then return true

	tests(0) = interfacePtr-&gt;test

	If not _tester-&gt;run(@tests(0), interfacePtr, 1) Then
		return false
	End If

	return true
End Function

Function startup cdecl Alias "startup" () As short export
	If moduleState.startups = 0 Then
		If moduleState.methods.startup &lt;&gt; NULL Then
			If not moduleState.methods.startup() Then
				print("**** Default.startup: Module startup handler failed")
				return false
			ElseIf not test() Then
				' TODO: Remove test from startup and move startup function to
				' end of boilerplate
				print("**** Default.start: Unit test failed")
				return false
			End If
		End If
	End If

	moduleState.startups += 1

	return true
End Function

Function shutdown cdecl Alias "shutdown" () As short export
	moduleState.startups -= 1

	If moduleState.startups &lt;= 0 Then
		moduleState.startups = 0

		If moduleState.methods.shutdown &lt;&gt; NULL Then
			If not moduleState.methods.shutdown() Then
				print("**** Default.startup: Module shutdown handler failed")
			End If
		End If
	End If

	return true
End Function
</xsl:template>

<xsl:template name="camelCase">
	<xsl:param name="text" />
	<xsl:param name="pascal" />
	<xsl:param name="delimiter" select="'-'" />
	<xsl:param name="upper-case" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
	<xsl:param name="lower-case" select="'abcdefghijklmnopqrstuvwxyz'" />

	<xsl:variable name="token" select="substring-before(concat($text, $delimiter), $delimiter)" />

	<xsl:choose>
		<xsl:when test="$pascal=1">
			<xsl:value-of select="translate(substring($token, 1, 1), $lower-case, $upper-case)" />
			<xsl:value-of select="translate(substring($token, 2), $upper-case, $lower-case)" />
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$token" />
		</xsl:otherwise>
	</xsl:choose>

	<xsl:if test="contains($text, $delimiter)">
		<xsl:call-template name="camelCase">
			<xsl:with-param name="text" select="substring-after($text, $delimiter)" />
			<xsl:with-param name="pascal" select="1" />
		</xsl:call-template>
	</xsl:if>
</xsl:template>

</xsl:stylesheet>
