#!/bin/bash

MELD_DIR=$1
MODULE_NAME=$2
SEP="_v"

compileExternal () {
	#fbc -mt -s console -dylib -export "./src/$1.bas" -x "./bin/module.so" \
	g++ -fPIC "./src/$1.c" -shared -o "./bin/module.so" -Wno-attributes -Wno-write-strings -Wl,--whole-archive -Wl,--no-whole-archive \
		|| { echo; echo Failed to compile $1 module, build terminated; exit 1; }
}

if [ ! -f "./src/$MODULE_NAME.c" ] && [ ! -f "./src/$MODULE_NAME.cpp" ]; then
	echo Could not find ./src/$MODULE_NAME.c or ./src/$MODULE_NAME.cpp;
	exit 1;
fi

if [ -f "./bin/module.xml" ]; then
	rm ./bin/module.xml
fi

if [ -f "./.meld/deps" ]; then
	rm ./.meld/deps
fi

cat "./src/$MODULE_NAME.c" | $MELD_DIR/build/parse-cpp $MODULE_NAME > ./bin/module.xml

xsltproc -o ./.meld/version "$MELD_DIR/build/templates/version.xslt" ./bin/module.xml

MODULE_VERSION=$(<./.meld/version)

xsltproc -o ./.meld/deps "$MELD_DIR/build/templates/dependencies.xslt" ./bin/module.xml

if [ -f "./.meld/deps" ]; then
	MODULE_DEPS=$(<./.meld/deps)

	while read -r REQUIRE; do
		RESOLVED=`$MELD_DIR/build/resolve-version $REQUIRE`
		xsltproc -o ./src/headers/$RESOLVED.h "$MELD_DIR/build/templates/header-c.xslt" "./meld_modules/$RESOLVED/module.xml"
	done <<< "$MODULE_DEPS"
fi

xsltproc -o ./src/headers/meld_v0.1.0.h "$MELD_DIR/build/templates/header-c.xslt" "./meld_modules/meld_v0.1.0/module.xml"
xsltproc -o ./src/headers/module_v0.1.0.h "$MELD_DIR/build/templates/header-c.xslt" "./meld_modules/module_v0.1.0/module.xml"

xsltproc -o ./src/headers/$MODULE_NAME$SEP$MODULE_VERSION.h "$MELD_DIR/build/templates/header-c.xslt" ./bin/module.xml

#xsltproc -o ./src/module.h "$MELD_DIR/build/templates/module-c.xslt" ./bin/module.xml

#xsltproc -o ./src/$MODULE_NAME.h "$MELD_DIR/build/templates/include-c.xslt" ./bin/module.xml

compileExternal $MODULE_NAME
