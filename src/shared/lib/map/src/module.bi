
/'
 ' Generated by Meld Framework, do not modify.  Any changes will be overwritten
 ' during the next build.
 '/


#include once "crt.bi"
#include once "headers/map_v0.1.0.bi"
#include once "map.bi"

dim shared _moduleLocal as Module.Interface

Function exports cdecl Alias "exports" () As any ptr export
	
	moduleState.methods.startup = @Map.startup
	moduleState.methods.shutdown = @Map.shutdown
	moduleState.methods.test = @Map.test
	moduleState.methods.construct = @Map.construct
	moduleState.methods.destruct = @Map.destruct
	moduleState.methods.assign = @Map.assign
	moduleState.methods.assignPtr = @Map.assignPtr
	moduleState.methods.request = @Map.request
	moduleState.methods.requestPtr = @Map.requestPtr
	moduleState.methods.unassign = @Map.unassign
	moduleState.methods.getLength = @Map.getLength
	moduleState.methods.purge = @Map.purge
	moduleState.methods.getIterator = @Map.getIterator

	return @moduleState.methods
End Function

Function load cdecl Alias "load" (modulePtr As Module.Interface ptr) As short export
	If modulePtr = NULL Then
		printf(!"**** Map.load: Invalid Module interface pointer\n")
		return false
	End If

	If not moduleState.isLoaded Then
		moduleState.isStarted = false
		moduleState.isLoaded = true

		_moduleLocal = *modulePtr
		_module = @_moduleLocal

		_map = exports()

		_console = modulePtr->require("console_v0.1.0")
		If _console = NULL then
			printf("**** Map.load: Failed to load console dependency")
			Return false
		End If

		_fault = modulePtr->require("fault_v0.1.0")
		If _fault = NULL then
			printf("**** Map.load: Failed to load fault dependency")
			Return false
		End If

		_tester = modulePtr->require("tester_v0.1.0")
		If _tester = NULL then
			printf("**** Map.load: Failed to load tester dependency")
			Return false
		End If

		_resourceContainer = modulePtr->require("resource-container_v0.1.0")
		If _resourceContainer = NULL then
			printf("**** Map.load: Failed to load resource-container dependency")
			Return false
		End If

		_bst = modulePtr->require("bst_v0.1.0")
		If _bst = NULL then
			printf("**** Map.load: Failed to load bst dependency")
			Return false
		End If

		_iterator = modulePtr->require("iterator_v0.1.0")
		If _iterator = NULL then
			printf("**** Map.load: Failed to load iterator dependency")
			Return false
		End If


		errors.allocationError = _fault->getCode("AllocationError")
		If errors.allocationError = NULL then
			printf(!"**** Map.load: Missing error definition for AllocationError\n")
			Return false
		End If

		errors.nullReferenceError = _fault->getCode("NullReferenceError")
		If errors.nullReferenceError = NULL then
			printf(!"**** Map.load: Missing error definition for NullReferenceError\n")
			Return false
		End If

		errors.resourceAllocationError = _fault->getCode("ResourceAllocationError")
		If errors.resourceAllocationError = NULL then
			printf(!"**** Map.load: Missing error definition for ResourceAllocationError\n")
			Return false
		End If

		errors.resourceInitializationError = _fault->getCode("ResourceInitializationError")
		If errors.resourceInitializationError = NULL then
			printf(!"**** Map.load: Missing error definition for ResourceInitializationError\n")
			Return false
		End If

		errors.resourceMissingError = _fault->getCode("ResourceMissingError")
		If errors.resourceMissingError = NULL then
			printf(!"**** Map.load: Missing error definition for ResourceMissingError\n")
			Return false
		End If


	End If

	return true
End Function

Function unload cdecl Alias "unload" () As short export

	If moduleState.isStarted Then
		If moduleState.methods.shutdown <> NULL Then
			If not moduleState.methods.shutdown() Then
				printf(!"**** Map.unload: Module shutdown handler failed\n")
				return false
			End If
		End If

		moduleState.isStarted = false
	End If

	moduleState.isLoaded = false

	return true
End Function


Function test cdecl Alias "test" () As short export
	dim As Map.Interface ptr interfacePtr = exports()
	dim As Tester.testModule tests(1)

	If interfacePtr->test = NULL Then return true

	tests(0) = interfacePtr->test

	If not _tester->run(@tests(0), 1) Then
		return false
	End If

	return true
End Function


Function startup cdecl Alias "startup" () As short export
	If not moduleState.isStarted Then
		If moduleState.methods.startup <> NULL Then
			If not moduleState.methods.startup() Then
				printf(!"**** Map.startup: Module startup handler failed\n")
				return false
			End If
		End If

		moduleState.isStarted = true
	End If

	return true
End Function

Function shutdown cdecl Alias "shutdown" () As short export
	If moduleState.isStarted Then
		If moduleState.methods.shutdown <> NULL Then
			If not moduleState.methods.shutdown() Then
				printf(!"**** Map.shutdown: Module shutdown handler failed\n")
			End If
		End If

		moduleState.isStarted = false
	End If

	return true
End Function
