<?xml version="1.0" encoding="UTF-8"?>
<module name="bst">
  <requires module='console' version='0.1.0' />
  <requires module='fault' version='0.1.0' />
  <requires module='tester' version='0.1.0' />
  <requires module='iterator' version='0.1.0' />
  <version>0.1.0</version>
  <typedef name='CompareFunction' type='function' modifier='value'>
    <param name='criteria' type='any' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='short' modifier='value' />
  </typedef>
  <class name='Node'>
    <property name='rightPtr' type='Node' modifier='pointer' const='false' />
    <property name='leftPtr' type='Node' modifier='pointer' const='false' />
    <property name='parent' type='Node' modifier='pointer' const='false' />
    <property name='element' type='any' modifier='pointer' const='false' />
  </class>
  <class name='Instance'>
    <property name='root' type='Node' modifier='pointer' const='false' />
    <property name='length' type='integer' modifier='value' const='false' />
    <property name='compare' type='CompareFunction' modifier='value' const='false' />
  </class>
  <function name='startup'>
    <returns type='short' modifier='value' />
    <description>Application main routine.</description>
  </function>
  <function name='shutdown'>
    <returns type='short' modifier='value' />
    <description>Application main routine.</description>
  </function>
  <function name='test'>
    <param name='describeFn' type='any' modifier='pointer' const='false' />
    <returns type='short' modifier='value' />
    <description>Standard test runner for modules.</description>
  </function>
  <function name='construct'>
    <returns type='Bst.Instance' modifier='pointer' />
    <throws type='ResourceAllocationError' />
    <description>Creates a new binary search tree.</description>
  </function>
  <function name='destruct'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <throws type='NullReferenceError' />
    <throws type='ReleaseResourceError' />
    <description>Destroys a binary search tree and any nodes within it.  It does not affect any data the nodes point to.</description>
  </function>
  <function name='insert'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='Bst.Node' modifier='pointer' />
    <throws type='NullReferenceError' />
    <throws type='InvalidArgumentError' />
    <throws type='ResourceAllocationError' />
    <description>Creates a node for the given element and places it within the tree.</description>
  </function>
  <function name='remove'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='nodePtr' type='Bst.Node' modifier='pointer' const='false' />
    <throws type='NullReferenceError' />
    <throws type='InvalidArgumentError' />
    <description>Removes a node from the tree.</description>
  </function>
  <function name='purge'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <throws type='NullReferenceError' />
    <throws type='ReleaseResourceError' />
    <description>Purges tree of all elements.</description>
  </function>
  <function name='search'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <param name='start' type='Bst.Node' modifier='pointer' const='false'>
      <description>Defaults to root node</description>
      <default>0</default>
    </param>
    <returns type='Bst.Node' modifier='pointer' />
    <throws type='NullReferenceError' />
    <throws type='InvalidArgumentError' />
    <description>Returns the node referencing the given element.  The element values must be equal, not the element pointers.  Results are based on the BSTs compare function.</description>
  </function>
  <function name='getLength'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <returns type='integer' modifier='value' />
    <throws type='NullReferenceError' />
    <description>Returns the number of nodes in the tree.</description>
  </function>
  <function name='getIterator'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <returns type='any' modifier='pointer' />
    <throws type='NullReferenceError' />
    <throws type='ResourceAllocationError' />
    <description>Creates a new Iterator for the tree.  Use the Iterator->destruct function to destroy the iterator.</description>
  </function>
  <function name='defaultCompare'>
    <param name='criteria' type='any' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='short' modifier='value' />
    <description>Default compare function operating on integer values.</description>
  </function>
  <function name='_createNode'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='Bst.Node' modifier='pointer' />
    <private />
    <description>Creates a node, increments the length but does not place in the tree.</description>
  </function>
  <function name='_deleteNode'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='nodePtr' type='Bst.Node' modifier='pointer' const='false' />
    <private />
    <description>Deletes node completely from tree.</description>
  </function>
  <function name='_deleteNodeRecurse'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='nodePtr' type='Bst.Node' modifier='pointer' const='false' />
    <private />
    <description>Deletes node and all of it's children.</description>
  </function>
  <function name='_searchRecurse'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='nodePtr' type='Bst.Node' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='Bst.Node' modifier='pointer'>
      <description>Last node in search, never returns NULL.</description>
    </returns>
    <private />
    <description>Handles search recursion.</description>
  </function>
  <function name='_recurseLeft'>
    <param name='nodePtr' type='Bst.Node' modifier='pointer' const='false' />
    <returns type='Bst.Node' modifier='pointer' />
    <private />
    <description>This routine initially expects the right pointer of the starting node and traverses left from there.  In a BST, this will always produce the next highest value, not including the parent.  This can be used to great purpose in many processes dealing with BSTs, such as removing nodes, balancing the tree, iteration, etc.</description>
  </function>
  <function name='_nextParentRecurse'>
    <param name='btreePtr' type='Bst.Instance' modifier='pointer' const='false' />
    <param name='current' type='Bst.Node' modifier='pointer' const='false' />
    <param name='element' type='any' modifier='pointer' const='false' />
    <returns type='Bst.Node' modifier='pointer' />
    <private />
    <description>Searches up the tree through parents to find next highest parent.</description>
  </function>
  <function name='_iterationHandler'>
    <param name='iter' type='Iterator.Instance' modifier='pointer' const='false' />
    <param name='target' type='any' modifier='pointer' const='false' />
    <returns type='integer' modifier='value' />
    <private />
    <description>Handler for generic Iterator.</description>
  </function>
  <namespace>Bst</namespace>
  <description>Binary Search Tree</description>
</module>
