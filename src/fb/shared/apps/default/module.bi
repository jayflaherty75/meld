

/'
 ' Generated by Meld Framework, do not modify.  Any changes will be overwritten
 ' during the build process.
 '/

#include once "../../../../../modules/headers/default/default-v1.bi"
#include once "default.bi"

Function exports cdecl Alias "exports" () As any ptr export
	moduleState.methods.startup = @Default.startup
moduleState.methods.shutdown = @Default.shutdown
moduleState.methods.test = @Default.test


	return @moduleState.methods
End Function

Function load cdecl Alias "load" (modulePtr As Module.Interface ptr) As short export
	If modulePtr = NULL Then
		print("**** Default.load: Invalid Module interface pointer")
		return false
	End If

	If not moduleState.isLoaded Then
		_console = modulePtr->require("console")
If _console = NULL then
print("**** Default.load: Failed to load console dependency")
Return false
End If
_fault = modulePtr->require("fault")
If _fault = NULL then
print("**** Default.load: Failed to load fault dependency")
Return false
End If
_errorHandling = modulePtr->require("error-handling")
If _errorHandling = NULL then
print("**** Default.load: Failed to load error-handling dependency")
Return false
End If
_tester = modulePtr->require("tester")
If _tester = NULL then
print("**** Default.load: Failed to load tester dependency")
Return false
End If


errors.GeneralError = _fault->getCode("GeneralError")
If errors.GeneralError = NULL then
print("**** Default.load: Missing error definition for GeneralError")
Return false
End If





		moduleState.references = 0
		moduleState.startups = 0
		moduleState.isLoaded = true
	End If

	moduleState.references += 1

	return true
End Function

Function unload cdecl Alias "unload" () As short export
	moduleState.references -= 1

	If moduleState.references <= 0 Then
		moduleState.references = 0
		moduleState.startups = 0
		moduleState.isLoaded = false
	End If

	return moduleState.isLoaded
End Function

Function test () As short export
	dim As Default.Interface ptr interfacePtr = exports()
	dim As Tester.testModule tests(1)

	If interfacePtr->test = NULL Then return true

	tests(0) = interfacePtr->test

	If not _tester->run(@tests(0), interfacePtr, 1) Then
		return false
	End If

	return true
End Function

Function startup cdecl Alias "startup" () As short export
	If moduleState.startups = 0 Then
		If moduleState.methods.startup <> NULL Then
			If not moduleState.methods.startup() Then
				print("**** Default.startup: Module startup handler failed")
				return false
			ElseIf not test() Then
				' TODO: Remove test from startup and move startup function to
				' end of boilerplate
				print("**** Default.start: Unit test failed")
				return false
			End If
		End If
	End If

	moduleState.startups += 1

	return true
End Function

Function shutdown cdecl Alias "shutdown" () As short export
	moduleState.startups -= 1

	If moduleState.startups <= 0 Then
		moduleState.startups = 0

		If moduleState.methods.shutdown <> NULL Then
			If not moduleState.methods.shutdown() Then
				print("**** Default.startup: Module shutdown handler failed")
			End If
		End If
	End If

	return true
End Function
