
/*
 * Generated by Meld Framework, do not modify.  Any changes will be overwritten
 * during the next build.
 */

#pragma once

namespace Module {

typedef short (*ModuleWillLoadFn) (void*  entryPtr ) __attribute__((cdecl));
typedef short (*ModuleHasUnloadedFn) (void*  entryPtr ) __attribute__((cdecl));

struct LibraryEntry { 
	void* library;
	void* interfacePtr;
	String moduleId;
	String moduleName;
	String moduleFullName;
	String moduleVersion;
	String fileName;
	ModuleHasUnloadedFn unload;
};

struct Interface {
	short (*startup) () __attribute__((cdecl));
	short (*shutdown) () __attribute__((cdecl));
	void* construct;
	void* destruct;
	void* update;
	void* test;
	short (*initialize) (int _argc , void*  _argv ) __attribute__((cdecl));
	short (*uninitialize) () __attribute__((cdecl));
	void  (*setModuleWillLoad) (ModuleWillLoadFn handler ) __attribute__((cdecl));
	void  (*setModuleHasUnloaded) (ModuleHasUnloadedFn handler ) __attribute__((cdecl));
	void* (*require) (char*  moduleName ) __attribute__((cdecl));
	short (*unload) (char*  moduleName ) __attribute__((cdecl));
	short (*testModule) (char*  moduleName ) __attribute__((cdecl));
	char* (*argv) (unsigned long index ) __attribute__((cdecl));
	long (*argc) () __attribute__((cdecl));
};

}
